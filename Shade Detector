import kivy
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.graphics import Color
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.camera import Camera
from kivy.uix.dropdown import DropDown
from kivy.uix.button import Button
from kivy.clock import Clock
from kivy.uix.popup import Popup

kivy.require('2.1.0')  # Make sure you use a compatible version of Kivy

class MyGrid(GridLayout):
  def __init__(self, **kwargs):
      super(MyGrid, self).__init__(**kwargs)
      self.cols = 1

      # Add your widgets here, if needed

class ShadeDetectorApp(App):
  def build(self):
      self.title = 'Shade Detector'
      return MyGrid()

if __name__ == '__main__':
  ShadeDetectorApp().run()
class HomeScreen(GridLayout):
    def __init__(self, **kwargs):
        super(HomeScreen, self).__init__(**kwargs)
        self.cols = 1

      # Add a button
          self.submit_button = Button(text='Submit', on_press=self.on_submit)
          self.add_widget(self.submit_button)

      def on_submit(self, instance):
          # Define what happens when the button is pressed
          input_text = self.shade_detector_input.text
          # Do something with the input_text, e.g., print it
          print(f"Submitted: {input_text}")

        # Add a label with black text and Times New Roman font
        self.times_new_roman_label = Label(text='Welcome to Shade Detector',
                                           color=(0, 0, 0, 1),
                                           font_name='times.ttf')
        self.add_widget(self.times_new_roman_label)
     
  # Set the font size of the "Welcome to Shade Detector" label to 30
      welcome_label = Label(text='Welcome to Shade Detector', font_size=30, font_name='times.ttf', color=(0, 0, 0, 1))
      self.add_widget(welcome_label)

# Add a button and bind it to the on_submit method
self.submit_button = Button(text='Submit')
self.submit_button.bind(on_press=self.on_submit)
self.add_widget(self.submit_button)

# Add a rectangle with a black outline and green inside
with self.canvas.before:
    Color(0, 0, 0, 1)  # Black color (RGBA)
    self.rect_outline = Rectangle(pos=self.pos, size=self.size)
    Color(0, 1, 0, 1)  # Green color (RGBA)
    self.rect_inside = Rectangle(pos=self.pos, size=self.size)

        # Add a TextInput widget
        self.shade_detector_input = TextInput(multiline=False)
        self.add_widget(self.shade_detector_input)

        # Add a button to switch to the CameraScreen
        self.start_button = Button(text='Start Camera')
        self.start_button.bind(on_press=self.on_start_camera)
        self.add_widget(self.start_button)

        # Add a button to switch to the ColorBlindnessScreen
        self.color_blindness_button = Button(text='Select Color Blindness')
        self.color_blindness_button.bind(on_press=self.on_select_color_blindness)
        self.add_widget(self.color_blindness_button)

    def on_start_camera(self, instance):
        # Switch to the CameraScreen when the "Start Camera" button is pressed
        app.screen_manager.current = 'camera_screen'

    def on_select_color_blindness(self, instance):
        # Switch to the ColorBlindnessScreen when the "Select Color Blindness" button is pressed
        app.screen_manager.current = 'color_blindness_screen'

class CameraScreen(Screen):
    def __init__(self, **kwargs):
        super(CameraScreen, self).__init__(**kwargs)
        self.cols = 1

        # Add a Camera widget to the screen
        self.camera = Camera(resolution=(500, 300), play=True)
        self.add_widget(self.camera)

        # Add a button to go back to the home screen at the bottom
        back_home_button = Button(text='Back to Home', font_size=12, font_name='times.ttf')
        back_home_button.bind(on_press=self.on_back)
        self.add_widget(back_home_button)


    def on_back(self, instance):
        # Switch back to the HomeScreen when the "Back to Home" button is pressed
        app.screen_manager.current = 'home_screen'

class ColorBlindnessScreen(Screen):
    def __init__(self, **kwargs):
        super(ColorBlindnessScreen, self).__init__(**kwargs)
        self.cols = 1

        # Add a label with black text, Times New Roman font, and green background
        self.label = Label(text='What Type of Color Blindness Do You Have?',
          font_size=30,  # Set the font size to 30
          font_name='times.ttf',
         color=(0, 0, 0, 1)

              # Create a dropdown menu
              self.dropdown = DropDown()

              # Add options to the dropdown menu
              options = ['Red-Green', 'Blue-Yellow', 'Complete']
              for option in options:
                  btn = Button(text=option, size_hint_y=None, height=44)
                  btn.bind(on_release=lambda btn: self.dropdown.select(btn.text))
                  self.dropdown.add_widget(btn)

              # Create a button to open the dropdown
              self.select_button = Button(text='Select Type', size_hint_y=None, height=9)
              self.select_button.bind(on_release=self.dropdown.open)
              self.dropdown.bind(on_select=lambda instance, x: setattr(self.select_button, 'text', x))

              # Add the button and dropdown to the screen
              self.add_widget(self.select_button)

              # Add a button to go back to the home screen
              back_button = Button(text='Back to Home')
              back_button.bind(on_press=self.on_back)
              self.add_widget(back_button)

          def on_back(self, instance):
              # Switch back to the HomeScreen when the "Back to Home" button is pressed
              app.screen_manager.current = 'home_screen'

      class ShadeDetectorApp(App):
          def build(self):
              # Create a ScreenManager to manage different screens
              self.screen_manager = ScreenManager()

              # Add the HomeScreen to the ScreenManager
              home_screen = HomeScreen()
              home_screen.name = 'home_screen'
              self.screen_manager.add_widget(home_screen)

              # Add the CameraScreen to the ScreenManager
              camera_screen = CameraScreen()
              camera_screen.name = 'camera_screen'
              self.screen_manager.add_widget(camera_screen)

              # Add the ColorBlindnessScreen to the ScreenManager
              color_blindness_screen = ColorBlindnessScreen()
              color_blindness_screen.name = 'color_blindness_screen'
              self.screen_manager.add_widget(color_blindness_screen)

              return self.screen_manager
            # Store the color blindness type for further customization
                self.color_blindness_type = color_blindness_type

                # Add a button to go back to the home screen
                back_button = Button(text='Back to Home')
                back_button.bind(on_press=self.on_back)
                self.add_widget(back_button)

            # Set the layout as the content of the screen
                self.add_widget(layout)

                # Label to display scanned object name
                self.scanned_label = Label(text='', font_name='times.ttf', font_size=30, color=(0, 0, 0, 1))
                self.add_widget(self.scanned_label)

                # Schedule the update function to continuously filter camera output
                Clock.schedule_interval(self.update, 1.0 / 30.0)

            def update(self, dt):
                # Detect the object and update the scanned_label
                scanned_object_name = detect_object(self.camera.get_texture())
                self.scanned_label.text = scanned_object_name

                # Schedule the update function to continuously filter camera output
                Clock.schedule_interval(self.update, 1.0 / 30.0)

            def update(self, dt):
                # Get the camera texture
                texture = self.camera.texture

                # Check if the camera texture is available and the color blindness type is set
                if texture is not None and self.color_blindness_type is not None:
                    # Get the camera image as a numpy array
                    image_array = texture.pixels

                    # Apply color filtering based on the selected color blindness type
                    if self.color_blindness_type == 'Red-Green':
                        # Filter only red and green colors
                        image_array[:, :, 1] = 0  # Set all green values to 0
                    elif self.color_blindness_type == 'Blue-Yellow':
                        # Filter only blue and yellow colors
                        image_array[:, :, 0] = 0  # Set all blue values to 0
                    elif self.color_blindness_type == 'Complete':
                        # No filtering for complete color vision
                        pass

                    # Update the camera texture with the modified image array
                    texture.blit_buffer(image_array.tostring(), colorfmt='rgb', bufferfmt='ubyte')

            def on_back(self, instance):
                # Switch back to the HomeScreen when the "Back to Home" button is pressed
                app.screen_manager.current = 'home_screen'
# Create a BoxLayout to hold the toolbar and camera preview
layout = BoxLayout(orientation='vertical')

# Add a green toolbar with the text "About" in black Times New Roman font
toolbar = BoxLayout(size_hint=(1, None), height=44, padding=5)
toolbar.canvas.before.add(Color(0, 1, 0, 1))  
# Green color for the toolbar
toolbar.canvas.before.add(Rectangle(pos=toolbar.pos, size=toolbar.size))
about_label = Label(text ='About', color=(0, 0, 0, 1), font_name='times.ttf', font_size=14)
toolbar.add_widget(about_label)
toolbar.add_widget(about_label)
layout.add_widget(toolbar)
# Set the layout as the content of the screen
    self.add_widget(layout)

    # Schedule the update function to continuously filter camera output
    Clock.schedule_interval(self.update, 1.0 / 30.0)

def show_about_popup(self, instance):
    # Create a popup with the specified information
    about_content = (
        "About Colorblindness\n"
        "Color blindness mostly affects males and is caused by sex-linked genes that are inherited within the family."
        "\n\n"
        "It is a deficiency in the ability to see color, and it is typically long term. However, it is not just genetic, as you age, "
        "color blindness becomes a common problem as well."
    "Resources:\n"
        "- National Eye Institute: https://nei.nih.gov/health/color_blindness/facts_about"
        "\n\n"
        "Search for nearest eye doctor:\n"
        "Google Search"
    )

    about_popup = Popup(title="About Colorblindness",
                       content=Label(text=about_content, font_size=10, font_name='times.ttf', markup=True),
                       size_hint=(None, None), size=(400, 300))

  # Add a green background to the popup
  about_popup.content.canvas.before.add(Color(0, 1, 0, 1))
  about_popup.content.canvas.before.add(Rectangle(pos=about_popup.pos, size=about_popup.size))

  # Add the Label to the BoxLayout
  about_popup.content.add_widget(Label(text=about_content, font_size=10, font_name='times.ttf', markup=True))
# Add the Label to the BoxLayout
    about_popup.content.add_widget(Label(text=about_content, font_size=10, font_name='times.ttf', markup=True))

    # Add the 'T' button for increasing text size
    increase_size_button = Button(text='T', size_hint=(None, None), size=(40, 40),
                                  background_normal='', background_color=(1, 1, 1, 1),
                                  on_press=self.increase_text_size)
    about_popup.content.add_widget(increase_size_button)

    about_popup.open()

def increase_text_size(self, instance):
    # Increase the text size in the Label or adjust as needed
    pass

  about_popup.open()

  def update(self, dt):
  # ... (your existing code)

  def on_back(self, instance):
  # Switch back to the HomeScreen when the "Back to Home" button is pressed
  app.screen_manager.current = 'home_screen'

# Instantiate the App and run it
if __name__ == '__main__':
    app = ShadeDetectorApp()
    app.run()
    print("Application closed. Perform cleanup or additional actions here")
